#!/bin/sh
# -*- tab-width:4;indent-tabs-mode:nil -*-
# ex: ts=4 sw=4 et

# Pull environment for this install
. "{{runner_base_dir}}/lib/env.sh"

# Make sure the user running this script is the owner and/or su to that user
check_user $@
ES=$?
if [ "$ES" -ne 0 ]; then
    exit $ES
fi

# Keep track of where script was invoked
ORIGINAL_DIR=$(pwd)

# Make sure CWD is set to runner run dir
cd $RUNNER_BASE_DIR

# Identify the script name
SCRIPT=`basename $0`
#
# Repl2 Commands
#
case "$1" in
    status)
        # Make sure the local node is running
        node_up_check

        shift

        NODETOOL rpc riak_repl_console status $@
        ;;    
    clusterstats)
        ACTION=$1

        # Make sure the local node is running
        node_up_check

        shift
        if [ $# -lt 1 ]; then
            NODETOOL rpc riak_repl_console $ACTION
        else
            NODETOOL rpc riak_repl_console $ACTION $1
        fi
        ;;
    clustername)
        ACTION=$1
        shift
        if [ $# -gt 1 ]; then
            echo "Usage: $SCRIPT $ACTION [clustername]"
            exit 1
        fi

        # Make sure the local node is running
        node_up_check

        if [ $# -lt 1 ]; then
            NODETOOL rpc riak_repl_console $ACTION
        else
            NODETOOL rpc riak_repl_console $ACTION $1
        fi
        ;;
    connections|clusters)
        ACTION=$1
        shift
        if [ $# -gt 0 ]; then
            echo "Usage: $SCRIPT $ACTION"
            exit 1
        fi

        # Make sure the local node is running
        node_up_check

        NODETOOL rpc riak_repl_console $ACTION
        ;;
    connect|disconnect)
        ACTION=$1
        CMD=`echo $ACTION | sed 's/-/_/'`
        shift
        if [ $# -lt 1 ]; then
            case $ACTION in
                connect)
                    echo "Usage: $SCRIPT $ACTION  <host:port>"
                    ;;
                disconnect)
                    echo "Usage: $SCRIPT $ACTION {<host:port> | <clustername>}"
                    ;;
            esac
            exit 1
        fi

        # Make sure the local node is running
        node_up_check

        if [ $# -lt 2 ]; then
            # by clustername or ip:port
            NODETOOL rpc riak_repl_console $CMD $1
        else
            # by IP/Port
            NODETOOL rpc riak_repl_console $CMD $1 $2
        fi
        ;;
    realtime)
        ACTION=$1
        shift
        # Make sure the local node is running
        node_up_check
        if [ $# -lt 1 ]; then
            echo "Usage: $SCRIPT $ACTION enable <clustername> |"
            echo "                       disable <clustername> |"
            echo "                       start [<clustername>] |"
            echo "                       stop [<clustername>] |"
            echo "                       cascades [ always | never ] |"
            echo "                       rebalance [<clustername>] |"
            echo "                       heartbeat_timeout <clustername> [<value>] |"
            echo "                       heartbeat_interval <clustername> [<value>] |"
            echo "                       remote_max_bytes <clustername> [<value>] |"
            echo "                       connections_per_queue <clustername> [<value>] |"
            echo "                       retry_limit <clustername> [<value>] |"                                                
            exit 1
        fi
        SUB_CMD=$1
        shift
        case $SUB_CMD in
            enable|disable)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION {enable|disable} <clustername>"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                ;;

            start|stop)
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD
                    exit 1
                else
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                fi
                ;;

            cascades)
                if [ "$ACTION" != "realtime" ]; then
                    echo "cascades is only available for realtime"
                    exit 1
                fi
                NEWVAL=$1
                RES=`NODETOOL ping`
                if [ "$RES" != "pong" ]; then
                    echo "Node is not running!"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console realtime_cascades $@
                ;;

            rebalance)
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD
                    exit 1
                else
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                fi
                ;;             

            heartbeat_timeout)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> <time (seconds)> |"
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> |"
                    exit 1
                fi
                REMOTE=$1
                shift
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $REMOTE
                else
                    NODETOOL rpc riak_repl_console $SUB_CMD $REMOTE $1
                fi
                ;;

            heartbeat_interval)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> <time (seconds)> |"
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> |"
                    exit 1
                fi
                REMOTE=$1
                shift
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $REMOTE
                else
                    NODETOOL rpc riak_repl_console $SUB_CMD $REMOTE $1
                fi
                ;;

            remote_max_bytes)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> <bytes> |"
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> |"
                    exit 1
                fi
                REMOTE=$1
                shift
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $REMOTE
                else
                    NODETOOL rpc riak_repl_console $SUB_CMD $REMOTE $1
                fi
                ;;                

            connections_per_queue)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> <number> |"
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> |"
                    exit 1
                fi
                REMOTE=$1
                shift
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $REMOTE
                else
                    NODETOOL rpc riak_repl_console $SUB_CMD $REMOTE $1
                fi
                ;;  

            retry_limit)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> <number> |"
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <clustername> |"
                    exit 1
                fi
                REMOTE=$1
                shift
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $REMOTE
                else
                    NODETOOL rpc riak_repl_console $SUB_CMD $REMOTE $1
                fi
                ;; 

            *)
                echo "Usage: "
                exit 1
                ;;
        esac
        ;;

    fullsync)
        ACTION=$1
        shift
        # Make sure the local node is running
        node_up_check
        if [ $# -lt 1 ]; then
            echo "Usage: $SCRIPT $ACTION enable <clustername> |"
            echo "                       disable <clustername> |"
            echo "                       start [<clustername>] |"
            echo "                       stop [<clustername>] |"
            echo "                       max_fssource_node [<value>] |"
            echo "                       max_fssource_cluster [<value>] |"
            echo "                       max_fssink_node [<value>]"
            exit 1
        fi
        SUB_CMD=$1
        shift
        case $SUB_CMD in
            enable|disable)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION {enable|disable} <clustername>"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                ;;
            start|stop)
                if [ $# -lt 1 ]; then
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD
                    exit 1
                else
                    NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                fi
                ;;

            max_fssource_node)
                if [ "$ACTION" != "fullsync" ]; then
                    echo "max_fssource_node is only available for fullsync"
                    exit 1
                fi
                NEWVAL=$1
                # Make sure the local node is running
                node_up_check
                NODETOOL rpc riak_repl_console $SUB_CMD $@
                ;;

            max_fssink_node)
                if [ "$ACTION" != "fullsync" ]; then
                    echo "max_fssink_node is only available for fullsync"
                    exit 1
                fi
                NEWVAL=$1
                # Make sure the local node is running
                node_up_check
                NODETOOL rpc riak_repl_console $SUB_CMD $@
                ;;

            max_fssource_cluster)
                if [ "$ACTION" != "fullsync" ]; then
                    echo "max_fssource_cluster is only available for fullsync"
                    exit 1
                fi
                NEWVAL=$1
                # Make sure the local node is running
                node_up_check
                NODETOOL rpc riak_repl_console $SUB_CMD $@
                ;;

            *)
                echo "Usage: $SCRIPT $ACTION enable <clustername> |"
                echo "                       disable <clustername> |"
                echo "                       start [<clustername>] |"
                echo "                       stop [<clustername>] |"
                echo "                       max_fssource_node [<value>] |"
                echo "                       max_fssource_cluster [<value>] |"
                echo "                       max_fssink_node [<value>]"
                exit 1
                ;;
        esac
        ;;


    object-filtering)
        ACTION=$1
        shift

        if [ $# -lt 1 -o $# -gt 3 ]; then
            echo "Usage: $SCRIPT $ACTION"
            echo "enable        (enables realtime and fullsync)"
            echo "              <Mode> [Mode = realtime, fullsync]"
            echo "disable       (disables realtime and fullsync)"
            echo "              <Mode> [Mode = realtime, fullsync]"
            echo "status"
            echo "status-all"
            echo "clear  <Mode> [Mode = all, repl, realtime, fullsync]"
            echo "print  <Mode> [Mode = all, realtime, fullsync, loaded_repl, loaded_realtime, loaded_fullsync]"
            echo "              <Mode> <Remote Name>"
            echo "load   <Mode> <Path to config file> [Mode = repl, realtime, fullsync]"
            echo "check  <Path to config file>"
            echo ""
            exit 1
        fi

        # Make sure the local node is running
        node_up_check

        SUB_CMD=$1
        shift

        case "${SUB_CMD}" in
            enable)
                if [ $# -eq 0 ]; then
                    NODETOOL rpc riak_repl_console object_filtering_enable
                elif [ $# -eq 1 ]; then
                    NODETOOL rpc riak_repl_console object_filtering_enable $1
                else 
                    echo "Usage: $SCRIPT $ACTION enable (optional <Mode> [Mode = realtime, fullsync])"
                    exit 1
                fi
                ;;
            disable)
                if [ $# -eq 0 ]; then
                    NODETOOL rpc riak_repl_console object_filtering_disable
                elif [ $# -eq 1 ]; then
                    NODETOOL rpc riak_repl_console object_filtering_disable $1
                else 
                    echo "Usage: $SCRIPT $ACTION disable (optional <Mode> [Mode = realtime, fullsync])"
                    exit 1
                fi
                ;;
            status)
                if [ $# -ne 0 ]; then
                  echo "Usage: $SCRIPT $ACTION status"
                  exit 1
                fi
                NODETOOL rpc riak_repl_console object_filtering_status
                ;;
            status-all)
                if [ $# -ne 0 ]; then
                  echo "Usage: $SCRIPT $ACTION status-all"
                  exit 1
                fi
                NODETOOL rpc riak_repl_console object_filtering_status_all
                ;;                
            clear)
                if [ $# -ne 1 ]; then
                  echo "Usage: $SCRIPT $ACTION clear-config <Mode> [Mode = all, repl, realtime, fullsync]"
                  exit 1
                fi
                NODETOOL rpc riak_repl_console object_filtering_clear_config $1
                ;;
            print)
                if [ $# -eq 1 ]; then
                    NODETOOL rpc riak_repl_console object_filtering_print_config $1
                elif [ $# -eq 2 ]; then
                    NODETOOL rpc riak_repl_console object_filtering_print_config $1 $2
                else
                echo "Usage: $SCRIPT $ACTION print-config <Mode> [Mode = all, realtime, fullsync, loaded_repl, loaded_realtime, loaded_fullsync] (optional <Remote Name>)"
                exit 1
                fi
                ;;                
            load)
                if [ $# -ne 2 ]; then
                  echo "Usage: $SCRIPT $ACTION load-config <Mode> <Path to config file> [Mode = repl, realtime, fullsync]"
                  exit 1
                fi
                NODETOOL rpc riak_repl_console object_filtering_load_config $1 $2
                ;;
            check)
                if [ $# -ne 1 ]; then
                  echo "Usage: $SCRIPT $ACTION check-config <Path to config file>"
                  exit 1
                fi
                NODETOOL rpc riak_repl_console object_filtering_check_config $1
                ;;                
            *)
                echo "Usage: $SCRIPT $ACTION"
                echo "enable        (enables realtime and fullsync)"
                echo "              <Mode> [Mode = realtime, fullsync]"
                echo "disable       (disables realtime and fullsync)"
                echo "              <Mode> [Mode = realtime, fullsync]"
                echo "status"
                echo "status-all"
                echo "clear  <Mode> [Mode = all, repl, realtime, fullsync]"
                echo "print  <Mode> [Mode = all, realtime, fullsync, loaded_repl, loaded_realtime, loaded_fullsync]"
                echo "              <Mode> <Remote Name>"
                echo "load   <Mode> <Path to config file> [Mode = repl, realtime, fullsync]"
                echo "check  <Path to config file>"
                echo ""
                exit 1
            ;;
        esac
    ;;    

  modes)
        CMD=$1
        shift

        # Make sure the local node is running
        node_up_check

        NODETOOL rpc riak_repl_console $CMD $@
        ;;

    proxy_get)
        ACTION=$1
        shift

        # Make sure the local node is running
        node_up_check

        if [ $# -ne 2 ]; then
            echo "Usage: $SCRIPT $ACTION enable <clustername> |"
            echo "                       disable <clustername> |"
            exit 1
        fi
        SUB_CMD=$1
        shift
        case $SUB_CMD in
            enable|disable)
                if [ $# -lt 1 ]; then
                    echo "Usage: $SCRIPT $ACTION {enable|disable} <clustername>"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console $ACTION $SUB_CMD $1
                ;;
        esac
        ;;

    nat-map)
        ACTION=$1
        shift
        # Make sure the local node is running
        RES=`NODETOOL ping`
        if [ "$RES" != "pong" ]; then
            echo "Node is not running!"
            exit 1
        fi
        if [ $# -lt 1 -o $# -gt 3 ]; then
            echo "Usage: $SCRIPT $ACTION show |"
            echo "                       add <externalip>[:port] <internalip> |"
            echo "                       del <externalip>[:port] <internalip>"
            exit 1
        fi
        SUB_CMD=$1
        shift
        case $SUB_CMD in
            show)
                if [ $# -ne 0 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console show_nat_map
                ;;
            add)
                if [ $# -ne 2 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <externalip>[:port] <internalip>"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console add_nat_map $1 $2
                ;;
            del)
                if [ $# -ne 2 ]; then
                    echo "Usage: $SCRIPT $ACTION $SUB_CMD <externalip>[:port] <internalip>"
                    exit 1
                fi
                NODETOOL rpc riak_repl_console del_nat_map $1 $2
                ;;
            *)
                echo "Usage: $SCRIPT $ACTION show |"
                echo "                       add <externalip>[:port] <internalip> |"
                echo "                       del <externalip>[:port] <internalip>"
                exit 1
        esac
        ;;
    add-block-provider-redirect)
        CMD=$1
        shift
        if [ $# -ne 2 ]; then
            echo "Usage: $SCRIPT $ACTION show |"
            echo "                       block-provider-redirect <from-cluster> <to-cluster>"
            exit 1
        fi
        # Make sure the local node is running
        node_up_check

        NODETOOL rpc riak_repl_console add_block_provider_redirect $1 $2
        ;;
    show-block-provider-redirect)
        CMD=$1
        shift
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $ACTION show |"
            echo "                       show-block-provider-redirect <from-cluster>"
            exit 1
        fi
        # Make sure the local node is running
        node_up_check

        NODETOOL rpc riak_repl_console show_block_provider_redirect $1
        ;;
    delete-block-provider-redirect)
        CMD=$1
        shift
        if [ $# -ne 1 ]; then
            echo "Usage: $SCRIPT $ACTION show |"
            echo "                       delete-block-provider-redirect <from-cluster>"
            exit 1
        fi
        # Make sure the local node is running
        node_up_check

        NODETOOL rpc riak_repl_console delete_block_provider_redirect $1
        ;;
    show-local-cluster-id)
        CMD=$1
        shift
        if [ $# -ne 0 ]; then
            echo "Usage: $SCRIPT $ACTION show |"
            echo "                       show-local-cluster-id"
            exit 1
        fi
        # Make sure the local node is running
        node_up_check

        NODETOOL rpc riak_repl_console show_local_cluster_id
        ;;
    *)


 echo "\
Usage: $SCRIPT <command>

===============================================================================
Version 3 MDC replication:

   Connection setup:

      clustername [localname]

             Without a parameter, returns the current name of the cluster.
             With a parameter, names the current cluster.

      connect <host:port>

             Establish communications between clusters using the host:port of
             the remote cluster_mgr value. Connection information will be
             persisted across Riak restarts.

      disconnect {<host:port> | clustername}

             Disconnect from a remote cluster using either host:port of the
             remote cluster_mgr, or the name of the remote cluster.

      connections

             Display a list of connections between source and sink clusters.


   Operations:

      realtime enable <clustername>
      realtime disable <clustername>

             Enable or disable realtime replication to a named sink cluster.


      realtime start <clustername>
      realtime stop <clustername>

             Start or stop realtime replication to a named sink cluster.
             Realtime repliction for a cluster must first be enabled before
             it is started.

      fullsync enable <clustername>
      fullsync disable <clustername>

             Enable or disable fullsync replication to a named sink cluster.

      fullsync start <clustername>
      fullsync stop <clustername>

             Start or stop fullsync replication to a named sink cluster.
             Fullsync repliction for a cluster must first be enabled before
             it is started.

      proxy_get enable <clustername>
      proxy_get disable <clustername>

             Allow a connected sink cluster to request Riak CS blocks in
             realtime from *this* source cluster.

      clusterstats [{<ip:-port> | <protocol-id>}]
             protocol-id = cluster_mgr | rt_repl | fs_repl

             Displays current cluster stats using an optional ip:port as well as
             an optional protocol.

      modes [<modelist>]

             modelist is one or both of mode_repl12, mode_repl13 separated by
             spaces. Changes the behavior of the realtime replication bucket hooks.

      add-block-provider-redirect [<from-cluster-id> <to-cluster-id>]

             provide a redirection to the <to-cluster-id> for proxy_get if
             the original cluster is going to be put out of service

      show-block-provider-redirect [<from-cluster-id>]
             show the mapping for a given cluster-id redirect

      delete-block-provider-redirect [<from-cluster-id>]

             delete a pre-existing redirect such that proxy_gets go
             again to the original provider cluster id.

      show-local-cluster-id []

             display this cluster's cluster-id tuple, for use with the *-block-provider-redirect
             commands

      bucket add <bucket name> <cluster name>

             Add a bucket to the list of buckets to be replicated for the given cluster

             e.g
             bucket add Cluster1 test

             Adds a bucket 'test' which will be replicated to Cluster1 in both realtime and fullsync

      bucket remove <bucket name> <cluster name>

             Remove a bucket from the list of filtered buckets for the given cluster. Once removed the bucket will
             no longer be replicated to that cluster

      bucket reset

             Reset the filtered bucket config - will mean no buckets will be replicated if bucket filtering is currently
             enabled

      bucket enable

             Enable bucket filtering for the current cluster

      bucket disable

             Disable bucket filtering for the current cluster

   Performance Tuning:

      realtime cascades [ always | never ]

             Enables or disables cascading realtime replication writes to
             realtime sink clusters. When set to never, no writes are
             cascaded. When set to always, when this cluster is a sink and
             receives a realtime write, it will forword that write (cascade)
             to any started sink clusters as well. If omitted, the current
             value is displayed.

      fullsync max_fssource_node [value]

             Limits the number of fullsync workers that will be running on
             each individual node in a source cluster. If the value is
             omitted, the current max_fxsource_node value is displayed.


      fullsync max_fssource_cluster [value]

             The hard limit of fullsync workers that will be running on the
             source side of a cluster across all nodes on that cluster for a
             fullsync to a sink cluster. If the value is omitted, the current
             max_fssource_cluster value is displayed.

      fullsync max_fssink_node [value]

             Limits the number of fullsync workers allowed to run on each
             individual node in a sink cluster. If the value is omitted, the
             current max_fssink_node value is displayed.

   NAT Configuration:

     nat-map show

            Displays the current NAT mapping table.

     nat-map add <externalip>[:port] <internalip>

            Add a NAT map from the external IP, with an optional port, to
            an internal IP.

     nat-map del <externalip>[:port] <internalip>

            Delete a specific NAT map entry.

"
exit 1
;;
esac
